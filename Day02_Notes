*** myjunitproject35_36 is the framework
*** .idea --->>> Belong to intellij. It has project specific information. DO NOT TOUCH
src --->>> source folder. It is used to create the classes and methods, It is used to either create a development
and testing framework.
main --->>> usually used by developers for development
test --->>> usually used by testers for testing
*** pom.xml --->>> This is the most important file in a maven project.
-used to add dependencies. plug-ins, and similar configurations
*** external libraries
This has imported libraries/jar files/plugins/dependencies


What fo you remember from the last class
   WebDriver driver = new ChromeDriver(); -> create ChromeDriver
*Navigations
   get(), navigate(), to(), back(), forward (), refresh()

*Common Driver methods
   getTitle(), getCurrentURL(), getPageSoure();

*Closing driver
   close(),quit()

*to maximize a windows
   driver.manage().window(),maximize()

*wait
   Thread.sleep(5000); --> comes from Java wait 4 second hard wait() 5 second for all conditions even if no need for wait
   NOTE: testers should now use this wait, cause it causes additional unnecessary wait
   Instead we will use IMPLICIT AND EXPLICIT WAIT we will learn later

MAVEN :
   Java project build tool. It makes project development and deployment easy

POM.XML
   It is a file we put external dependencies, plug ins, profiles, configurations...



   LOCATORS :
   1. id            : If there is an id attribute, then we can use id
   2. name
   3. className
   4. tagName
   5. linkText
   6. partialLinkText
   7. xpath
   8. css


   EMAIL ELEMENT :

   <input type="email" class="form-control" placeholder="Email" data-test="email" name="session[email]" id="session_email">

   TERSM     :
   tag       : input
   attribute  : type, class, placeholder, data-test, name, id
   value     : email is the value of type, session_email is the value of id,.....

   ******1. Locating the element by id

   ***Can i lovate the elemtn by id
   -Yes because there is an id attribute

   ***How can i locate/find that element ?

    WebElement emailBox = driver.findElement(By.id("session_email"));
        emailBox.sendKeys("testtechproed@gmail.com");

    NOTE : I can locate the same element by name
    driver.findElement(By.id("session_email"));

    I can locate the same element by className
    driver.findElement(By.calssName("form-control"));

    I can locate the sma element by tagName. NOT RECOMMENDED

    I cannot use linkText or partialLinkText because input is not a hyperlink

    I can use xpath & css


    ******2. Locating element by name :
    PASSWORD ELEMENT
    <input class="form-control" placeholder="Password" data-test="password" type="password" name="session[password]"
    id="session_password">

   ******3. Locating sign in button className :
   <input type="submit" name="commit" value="Sign in" class="btn btn-primary" data-test="submit" data-disable-with="Sign in">

   driver.findElement(By.className("btn btn-primary"))

   ******4. Location id by


  ===============DAY03====================
   <a class="nav-item nav-link" data-test="addresses" href="/addresses">Addresses</a>

   This element is a link. Because is has a tag
   We can use





   7. xpath
   **  there are 2 type so d xpath
   1. Absolute
   2. Relative
   Note : We should not use absolute for locating elements
   ***Locate the elements using relative xpath
   <input type="email" class="form-control" placeholder="Email" data-test="email" name="session[email]" id="session_email">
   //tag[@ANYattribute = 'Value of that attrubute'];
   Tag : input
   Attribute : type, class,......
   Value : email, form-control,.....
   XPATH FOR THIS ELEMENT : USE ANY OF THEM
   //input[@type='email'];
   //input[@class='form-control'];
   //input[@placegolder='Email'];
   //input[@data-test='email'];
   //input[@name='session[email]'];
   //input[@id='sessoin_email'];